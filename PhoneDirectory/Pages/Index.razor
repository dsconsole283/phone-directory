@page "/"
@inject DirectoryData data
@inject NavigationManager navManager


<PageTitle>Phone Directory Home</PageTitle>

<div>
    <button class="btn btn-light" @onclick="(() => OnAdminClick())">Admin</button>
</div>

@if (departments is not null)
{
    @foreach (var d in departments)
    {
        <div>
            <button class="btn btn-light" @onclick="(() => OnClick(d))">@d.Name</button>
        </div>
    }
}
@if (personnel is not null)
{
    @foreach (var p in personnel)
    {
        <div>
            @p.LastName
            @p.FirstName
            @p.Department.Name
            @p.Title.Name
            @p.PhoneMain
            @p.PhoneMobile
            @p.EmailAddress
            @p.Extension
        </div>
    }
}

@if (personnel is not null)
{
<table>
    <thead>
        <tr>Last Name</tr>
        <tr>First Name</tr>
        <tr>Department</tr>
        <tr>Title</tr>
        <tr>Phone</tr>
        <tr>Mobile</tr>
        <tr>Email</tr>
        <tr>Ext</tr>
    </thead>
    @foreach (var p in personnel)
    {
        <tr>
            @p.LastName,
            @p.FirstName,
            @p.Department.Name,
            @p.Title.Name,
            @p.PhoneMain,
            @p.PhoneMobile,
            @p.EmailAddress,
            @p.Extension
        </tr>
    }
</table>
}


<input type="text" placeholder="Search" 
    aria-label="Search Box" 
    @oninput="((txt) => OnSearchInput((string)txt.Value))"/>





@code{
    private List<DepartmentModel> departments;
    private List<PersonnelModel> personnel;
    private string selectedDepartment = "All";
    private string searchText = "";

    protected async override Task OnInitializedAsync()
    {
        departments = await data.GetAllDepartmentsAsync();
        personnel = await data.GetAllRecordsAsync();
    }

    private async Task OnClick(DepartmentModel d)
    {
        selectedDepartment = d.Name;
        await Filter();
    }

    private async Task Filter()
    {
        var output = await data.GetAllRecordsAsync();

        if (selectedDepartment != "All")
        {
            output = output.Where(x => x.Department.Name == selectedDepartment).ToList();
            output.OrderBy(x => x.IsExec == true).ThenByDescending(x => x.TitleId).ThenByDescending(x => x.LastName).ToList();
        }

        if (string.IsNullOrWhiteSpace(searchText) == false)
        {
            output = output.Where(
                x => x.FirstName.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) ||
                x.LastName.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)       ||
                x.Extension.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)      ||
                x.PhoneMain.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)      ||
                x.PhoneMobile.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)
            ).ToList();
        }
        else
        {
            personnel = await data.GetAllRecordsAsync();
        }

        personnel = output;
    }
    private async Task OnSearchInput(string searchInput)
    {
        searchText = searchInput;
        await Filter();
    }

    private void OnAdminClick()
    {
        navManager.NavigateTo("/admin");
    }
}
