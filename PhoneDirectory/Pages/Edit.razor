@page "/Edit/{Id}"

@inject DirectoryData data
@inject NavigationManager navManager

<AuthorizeView Context="Auth">
    <Authorized>
        @if (person is not null)
        {
            <h3>@person.FirstName @person.LastName, @person.Title.Name - @person.Department.Name</h3>
            @if (changesMade)
            {
                <h6></h6>
            }
            else
            {
                <h6 style="color: red">Editting</h6>
            }
            
            <EditForm Model="person" OnValidSubmit="SaveEdit">
            <DataAnnotationsValidator />
            <ValidationSummary />
                <div>
                    <label for="first-name">First Name</label>
                    <InputText id="first-name" @bind-Value="person.FirstName" @onfocus="ResetEditState"/>
                </div>
                <div>
                    <label for="last-name">Last Name</label>
                    <InputText id="last-name" @bind-Value="person.LastName" @onfocus="ResetEditState"/>
                </div>
                <div>
                    <label for="email-address">Email Address</label>
                    <InputText id="email-address" @bind-Value="person.EmailAddress" @onfocus="ResetEditState"/>
                </div>
                <div>
                    <label for="phone-main">Primary Phone Number</label>
                    <InputText id="phone-main" @bind-Value="person.PhoneMain" @onfocus="ResetEditState"/>
                </div>
                <div>
                    <label for="phone-mobile">Mobile Phone</label>
                    <InputText id="phone-mobile" @bind-Value="person.PhoneMobile" @onfocus="ResetEditState"/>
                </div>
                <div>
                    <label for="extension">Extension</label>
                    <InputText id="extension" @bind-Value="person.Extension" @onfocus="ResetEditState"/>
                </div>
                <div>
                   <InputRadioGroup id="department" @bind-Value="person.Department.Name">
                        @if (departments is not null)
                        {
                            @foreach (var d in departments)
                            {
                                <InputRadio Value="d.Name" id="d.Name" @onclick="ResetEditState"/>
                                <label for="@d.Name">@d.Name</label>
                            }
                        }
                   </InputRadioGroup>
                </div>
                <div>
                   <InputRadioGroup id="title" @bind-Value="person.Title.Name">
                        @if (titles is not null)
                        {
                            @foreach (var t in titles)
                            {
                                <InputRadio Value="t.Name" id="t.Name" @onclick="ResetEditState"/>
                                <label for="@t.Name">@t.Name</label>
                            }
                        }
                   </InputRadioGroup>
                </div>
                <div>
                    <label for="notes-text">Notes</label>
                    <InputTextArea id="notes-text" @bind-Value="person.Notes" @onfocus="ResetEditState"/>
                </div>
                <div>
                    <button type="submit" class="btn btn-success">@saveButtonText</button>
                </div>
            </EditForm>
        }
    </Authorized>
    <NotAuthorized>

    </NotAuthorized>
</AuthorizeView>



@code{
    [Parameter]
    public string Id { get; set; }

    private PersonnelModel person;
    private List<DepartmentModel> departments;
    private List<TitleModel> titles;
    private int personId;
    private string firstName = "";
    private string lastName = "";
    private string department = "";
    private string title = "";
    private string emailAddress = "";
    private string phoneMain = ""; 
    private string phoneMobile = "";
    private string extension = "";
    private string notes = "";
    private string saveButtonText = "Submit Changes";

    private bool changesMade = false;

    protected override async Task OnInitializedAsync()
    {
        personId = int.Parse(Id);
        person = await data.GetPersonByIdAsync(personId);

        if (person.PhoneMain == "None on File")
        {
            person.PhoneMain = string.Empty;
        }
        if (person.PhoneMobile == "None on File")
        {
            person.PhoneMobile = string.Empty;
        }
        if (person.Extension == "N/A")
        {
            person.Extension = string.Empty;
        }

        departments = await data.GetAllDepartmentsAsync();
        titles = await data.GetAllTitlesAsync();
    }
    private async Task SaveEdit()
    {
        firstName = person.FirstName;
        lastName = person.LastName;
        department = person.Department.Name;
        title = person.Title.Name;
        emailAddress = person.EmailAddress;
        phoneMain = person.PhoneMain;
        phoneMobile = person.PhoneMobile;
        extension = person.Extension;
        notes = person.Notes;
        await data.EditRecordAsync(person, firstName, lastName, department, title, emailAddress, phoneMain, phoneMobile, extension, notes);

        changesMade = true;
        saveButtonText = "Changes Saved!";
    }
    private void ResetEditState()
    {
        changesMade = false;
        saveButtonText = "Submit Changes";
    }
}
