@page "/Edit/{Id}"

@inject IDirectoryData data
@inject NavigationManager navManager

<style>

.text-input-block{
    display:inline-block;
}

.radio-button-group{
    display:inline-block;
}
</style>

<AuthorizeView Context="Auth">
    <Authorized>
        <button class="btn btn-outline-danger" @onclick="ReturnToAdmin">Return to Admin page</button>
        @if (person is not null)
        {
            <h3>@person.FirstName @person.LastName </h3>
            <h5>@person.Title.Name @person.Department.Name</h5>
            @if (isNewRecord)
            {
                <h6 style="color: green">New Record</h6>

            }
            else
            {
                <h6 style="color: red">Editting</h6>
            }
        <div style="text-input-block">
            <EditForm Model="person" OnValidSubmit="SaveEdit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="text-input-block">
                <div>
                    <div>
                        <label for="first-name">First Name</label>
                    </div>
                    <InputText id="first-name" @bind-Value="person.FirstName" @onfocus="ResetEditState"/>
                </div>
                <div>
                    <div>
                        <label for="last-name">Last Name</label>
                    </div>
                    <InputText id="last-name" @bind-Value="person.LastName" @onfocus="ResetEditState"/>
                </div>
                <div>
                    <div>
                        <label for="email-address">Email Address</label>
                    </div>
                    <InputText id="email-address" @bind-Value="person.EmailAddress" @onfocus="ResetEditState"/>
                </div>
                <div>
                    <div>
                        <label for="phone-main">Primary Phone Number</label>
                    </div>
                    <InputText id="phone-main" @bind-Value="person.PhoneMain" @onfocus="ResetEditState"/>
                </div>
                <div>
                    <div>
                        <label for="phone-mobile">Mobile Phone</label>
                    </div>
                    <InputText id="phone-mobile" @bind-Value="person.PhoneMobile" @onfocus="ResetEditState"/>
                </div>
                <div>
                    <div>
                        <label for="extension">Extension</label>
                    </div>
                    <InputText id="extension" @bind-Value="person.Extension" @onfocus="ResetEditState"/>
                </div>
            </div>
                <div style="radio-button-group">
                   <InputRadioGroup id="department" @bind-Value="person.Department.Name">
                       <div>
                        <label for="department">Department</label>
                       </div>
                        @if (departments is not null)
                        {
                            @foreach (var d in departments)
                            {
                                <div style="radio-button-group">
                                    <InputRadio Value="d.Name" id="d.Name" @onclick="ResetEditState"/>
                                    <label for="@d.Name">@d.Name</label>
                                </div>
                            }
                        }
                   </InputRadioGroup>
                </div>
                <div style="radio-button-group">
                   <InputRadioGroup id="title" @bind-Value="person.Title.Name">
                       <div>
                           <label for="title">Title</label>
                       </div>
                        @if (titles is not null)
                        {
                            @foreach (var t in titles)
                            {
                                <div style="radio-button-group">
                                    <InputRadio Value="t.Name" id="t.Name" @onclick="ResetEditState"/>
                                    <label for="@t.Name">@t.Name</label>
                                </div>
                            }
                        }
                   </InputRadioGroup>
                </div>
                <div>
                    <div>
                        <label for="notes-text">Notes</label>
                    </div>
                    <InputTextArea id="notes-text" @bind-Value="person.Notes" @onfocus="ResetEditState"/>
                </div>
                <div>
                    <button type="submit" class="btn btn-success">@saveButtonText</button>
                </div>
            </EditForm>
        </div>
        }
    </Authorized>
    <NotAuthorized>

    </NotAuthorized>
</AuthorizeView>



@code{
    [Parameter]
    public string Id { get; set; }

    private PersonnelModel person;
    private List<DepartmentModel> departments;
    private List<TitleModel> titles;
    private int personId;
    private string firstName = "";
    private string lastName = "";
    private string department = "";
    private string title = "";
    private string emailAddress = "";
    private string phoneMain = ""; 
    private string phoneMobile = "";
    private string extension = "";
    private string notes = "";
    private string saveButtonText = "Submit";

    private bool changesMade = false;
    private bool isValidRecord = false;
    private bool isNewRecord = false;

    protected override async Task OnInitializedAsync()
    {
        isValidRecord = int.TryParse(Id, out personId);

        if (isValidRecord)
        {
            person = await data.GetPersonByIdAsync(personId);

            if (person.PhoneMain == "None on File")
            {
                person.PhoneMain = string.Empty;
            }
            if (person.PhoneMobile == "None on File")
            {
                person.PhoneMobile = string.Empty;
            }
            if (person.Extension == "N/A")
            {
                person.Extension = string.Empty;
            }
        }
        else
        {
            isNewRecord = true;
            person = new();
            person.Department = new DepartmentModel();
            person.Title = new TitleModel();
        }
        departments = await data.GetAllDepartmentsAsync();
        titles = await data.GetAllTitlesAsync();
    }
    private async Task SaveEdit()
    {
        firstName = person.FirstName;
        lastName = person.LastName;
        department = person.Department.Name;
        title = person.Title.Name;
        emailAddress = person.EmailAddress;
        phoneMain = person.PhoneMain;
        phoneMobile = person.PhoneMobile;
        extension = person.Extension;
        notes = person.Notes;

        if (isNewRecord)
        {
            await data.AddRecordAsync(person, person.Department.Name, person.Title.Name);
        }
        else
        {
            await data.EditRecordAsync(person, firstName, lastName, department, title, emailAddress, phoneMain, phoneMobile, extension, notes);
        }

        changesMade = true;
        isNewRecord = false;
        saveButtonText = "Changes Saved!";
    }
    private void ResetEditState()
    {
        changesMade = false;
        saveButtonText = "Submit";
    }
    private void ReturnToAdmin()
    {
        navManager.NavigateTo("/Admin");
    }
}
